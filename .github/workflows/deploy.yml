name: Deploy to AWS Lambda

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install all dependencies (including dev for build)
      run: |
        npm ci
        rm -rf node_modules/.cache/serverless-framework || true

    - name: Build TypeScript
      run: npm run build

    - name: Install Serverless Framework v3
      run: npm install serverless@3

    - name: Clean up after build
      run: |
        # Remove dev dependencies after building
        npm prune --production
        # Remove large packages not needed at runtime
        rm -rf node_modules/aws-sdk || true  # 101MB - not needed in Lambda
        rm -rf node_modules/prisma || true   # 67MB - CLI tool not needed
        rm -rf node_modules/typescript || true  # 23MB - build tool
        rm -rf node_modules/@types || true   # 6MB - TypeScript definitions
        rm -rf node_modules/ts-node || true
        rm -rf node_modules/nodemon || true
        rm -rf node_modules/serverless-offline || true
        rm -rf node_modules/tsx || true
        rm -rf node_modules/effect || true   # 33MB - may not be needed
        rm -rf node_modules/@aws-sdk || true # 31MB - may be transitive dependency
        # Remove serverless framework from node_modules if present
        rm -rf node_modules/serverless || true
        # Remove documentation and test files from node_modules
        find node_modules -name "*.md" -delete || true
        find node_modules -name "*.ts" -delete || true
        find node_modules -name "*.map" -delete || true
        find node_modules -type d -name "test" -exec rm -rf {} + || true
        find node_modules -type d -name "tests" -exec rm -rf {} + || true
        find node_modules -type d -name "docs" -exec rm -rf {} + || true
        find node_modules -type d -name "examples" -exec rm -rf {} + || true
        find node_modules -name "LICENSE*" -delete || true
        find node_modules -name "CHANGELOG*" -delete || true

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Optimize for Lambda deployment
      run: |
        # Install only production dependencies again to ensure clean state
        npm install --production --no-optional
        # Remove unnecessary files to reduce package size
        find node_modules -name "*.d.ts" -delete || true
        find node_modules -name "*.ts" -delete || true
        find node_modules -name "*.map" -delete || true
        find node_modules -name "benchmark*" -type d -exec rm -rf {} + || true
        find node_modules -name "example*" -type d -exec rm -rf {} + || true
        # Check final package size
        echo "Package size breakdown:"
        du -sh node_modules lib dist 2>/dev/null | sort -hr || true
        echo "Total deployment size:"
        du -sh . --exclude=.git --exclude=.github | head -1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Deploy to AWS Lambda
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ap-south-1
        NODE_ENV: production
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      run: |
        npx serverless deploy --stage prod --region ap-south-1

    - name: Run Database Migrations (if needed)
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        npx prisma migrate deploy
      continue-on-error: true

    - name: Get deployment info
      run: |
        npx serverless info --stage prod --region ap-south-1